@page "/"
@using Econ.Services
@using FluentUI.Components.Stores
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>
<FluentMenuButton @ref=menubutton Text="@ServerName" OnMenuChanged="HandleOnMenuChanged">
    @foreach (var item in items)
    {
        <FluentMenuItem Id="@item.Key">@item.Value</FluentMenuItem>
    }
</FluentMenuButton>

<FluentTabs>
    <FluentTab Label="Live Store Data" Id="tab-2">
            <FluentUI.Components.Stores.LiveStoreDataComponent @ref=@LiveData ServerId="@ServerId"></FluentUI.Components.Stores.LiveStoreDataComponent>
      
    </FluentTab>
    <FluentTab Label="Historical transactions" Id="tab-3">
        <FluentUI.Components.Stores.StoresTransactionsComponent @ref=@TransactionsComponent ServerId="@ServerId"></FluentUI.Components.Stores.StoresTransactionsComponent>
    </FluentTab>

</FluentTabs>

@code {
    [Inject]
    private SpaceEngineersServerService serverService { get; set; }
    private FluentMenuButton menubutton = new();
    private StoresTransactionsComponent? TransactionsComponent;
    private LiveStoreDataComponent? LiveData;
    private Guid ServerId;
    private string ServerName = "Select Server";

    protected override async Task OnInitializedAsync()
    {
        serverService.ServersChanged += async () => { await SetupButton(); };
        await SetupButton();

        await InvokeAsync(StateHasChanged);
    }

    private async Task SetupButton()
    {
        foreach (var item in serverService.GetServers())
        {
            items[item.ServerId.ToString()] = item.ServerName;
        }
        items[Guid.Empty.ToString()] = "Empty";

        //   await InvokeAsync(StateHasChanged);
    }

    private Dictionary<string, string> items = new Dictionary<string, string>();

    private async Task HandleOnMenuChanged(MenuChangeEventArgs args)
    {
        ServerId = Guid.Parse(args.Id);
        TransactionsComponent.ServerId = ServerId;
        LiveData.ServerId = ServerId;
        ServerName = args.Value;
       await TransactionsComponent?.LoadData();
        await LiveData?.LoadData(ServerId);
    }

}

